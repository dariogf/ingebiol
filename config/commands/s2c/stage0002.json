########################################################
# Common parameters of command
# ------------------------------------------------------
# You only can modify the values of each key. Be careful
# with punctuation symbols, since this is a json file and
# needs to keep its structure.
#
# Comments must be in their own line preceded with a '#' 
# simbol. 
#
# You can add as many stages as you want, they are shown
# in alphabetical order.
#
########################################################

{
title:'SUBMIT FILES',
stage_type:'submit',
enabled: true,
submit_button_title: 'Run',

#	OPCIONES PARA EL PROGRAMA DE ENSAMBLAJE CABOG

input_params: [
 {
	title:'seqtrim',
	input_type: 'separator'
 }
,
 {
	input_type: 'file',
	id:'fasta_file_sq',
	save_as:'seqs',
	title:'Sequences (select type below)',
	default_value: '',
	required: true,
	tooltip:'Select a sequence file in fasta format'
 }
,
{
	input_type: 'file',
	id:'qual_file_sq',
	save_as:'seqs.fasta.qual',
	title:'Qualities (fasta)',
	default_value: '',
	required: false,
	tooltip:'Select a sequence file in fasta format'
}
,
 {
	input_type: 'popup',
	id:'input_type_popup_sq',
	command_switch:'%s',
	title:'Input type',
	default_value: 'valor3',
	values: {
					 'fasta + qual':'-f seqs -q seqs.fasta.qual',
					 'sff':'-f seqs.fasta -q seqs.fasta.qual',
					 'zip':'-c seqs.zip'
					 }
					,
	required: true,
	tooltip:'You can choose different input formats.'
 }
,
 {
	input_type: 'separator'
 }
,
 {
	input_type: 'integer',
	id:'min_length',
	command_switch:'--seqMinLength=%s',
	title:'Minimun desired length',
	required: false,
	tooltip:'un tooltip',
	default_value: '40',
	validation_lower_limit:'0',
	validation_upper_limit:''
 }
,
{
	input_type: 'text',
	id:'left_adaptor',
	title:'Left adaptor',
	default_value: 'acgagtgcgt',
	command_switch:'--adaptorSeqLeft=%s',
	required: false,
	size:'30',
	tooltip:'',
	validation_regex: '[ACTGactg]*',
	validation_error_msg: 'You must provide a valid nucleotide sequence (ACTG)'
}
,
{
	input_type: 'text',
	id:'right_adaptor',
	title:'Right adaptor',
	default_value: '',
	command_switch:'--adaptorSeqRight=%s',
	required: false,
	size:'30',
	tooltip:'',
	validation_regex: '',
	validation_error_msg: 'You must provide a valid nucleotide sequence (ACTG)'
}
,
 {
	title:'Assembly',
	input_type: 'separator'
 }
,
 {
	input_type: 'popup',
	id:'method_sq',
	command_switch:'unitigger=%s',
	title:'Assembly methods',
	default_value: 'valor3',
	values: {'Unitigger':'utg',
					 'Best Over Graph':'bog'}
					,
	required: true,
	tooltip:'You can choose between two different assembly methods: utg  and bog (recommended for 454 data).'
 }
#,
#  {
#	input_type: 'checkbox',
#	id:'ace_sq_cb',
#	command_switch:'createACE=1',
#	title:'Create ACE',
#	title_pos:'right',
#	default_value: 'false',
#	required: false,
#	tooltip:'Create an ACE file for the scaffolds'
# }
#,
#  {
#	input_type: 'checkbox',
#	id:'agp_sq_cb',
#	command_switch:'createAGP=1',
#	title:'Create AGP',
#	title_pos:'right',
#	default_value: 'false',
#	required: false,
#	tooltip:'Create an AGP file for the sacffolds'
# }
 ,
  {
	title:'Annotation',
	input_type: 'separator'
 }
,
  {
	input_type: 'checkbox',
	id:'annotate_sq_cb',
	command_switch:'-annotate',
	title:'Annotate (Swissprot)',
	title_pos:'right',
	default_value: 'true',
	required: false,
	tooltip:'Make annotation using blast with Swissprot and TrEMBL databases'
 }
 ,
{
	input_type: 'integer',
	id:'min_ident_genote',
	command_switch:'%s',
	title:'Minimum identity (%)',
	required: true,
	tooltip:'The minimum identity required to..., in percentage.',
	default_value: '45',
	validation_lower_limit:'45',
	validation_upper_limit:'100'
}
,
{
	input_type: 'integer',
	id:'min_hit_length_genote',
	command_switch:'%s',
	title:'Minimum hit length (nt)',
	required: true,
	tooltip:'The minimum hit length required to..., in nucleotides.',
	default_value: '75',
	validation_lower_limit:'20',
	validation_upper_limit:''
}
],
command_list:[
		######## SEQTRIM  ###########
		# extraer SFF solo si es SFF
		{ exec_if:'"$input_type_popup_sq"=="-f seqs.fasta -q seqs.fasta.qual"',
			required_files:['seqs'],
			command:'~mira/programs/x86_64/bin/sff_extract -o seqs seqs'
		}
		,
		# renombrar fichero si es zip
		{ exec_if:'"$input_type_popup_sq"=="-c seqs.zip"',
			required_files:['seqs'],
			command:'mv seqs seqs.zip'
		}
		,
		# ejecutar seqtrim
		{ 
			required_files:[],
			command:'~bioperl/seqtrim/seqtrim.pl --is_cDNA=0 $min_length $input_type_popup_sq $left_adaptor $right_adaptor -o fasta.pname'
		}
		,
		######## CABOG ###########
		# renombrar ficheros a pname
		{ 
			required_files:['fasta.pname.qual'],
			command:'mv fasta.pname.qual qual.pname'
		}
		,
		# quitar vacias del fasta
		{ 
			required_files:['fasta.pname'],
			command:'mv fasta.pname fasta_all.pname; ~bioperl/rails/ingebiol/config/parsers/remove_empty_fasta.rb fasta_all.pname > fasta.pname'
		}
		,
		# quitar vacias del qual
		{ 
			required_files:['qual.pname'],
			command:'mv qual.pname qual_all.pname; ~bioperl/rails/ingebiol/config/parsers/remove_empty_fasta.rb qual_all.pname > qual.pname'
		}
		,
		# extraer XML del fasta
		{ 
			required_files:['fasta.pname'],
			command:'~bioperl/rails/ingebiol/config/parsers/fasta2xml.rb fasta.pname > xml.pname'
		}
		,
		#crear zip con resultados del seqtrim
		{
			required_files:['fasta.pname','qual.pname','xml.pname'],
			command:'zip seqtrim_result.zip fasta.pname qual.pname xml.pname'
		}
		,
		# convert file to frg
		{
			required_files:['fasta.pname','qual.pname','xml.pname'],
			command:'~amos/programs/x86_64/bin/tarchive2ca -o pname fasta.pname 2>> celera_errors.txt'
		}
		,
		# run cabog with frg file, 
		{ 
			required_files:['pname.frg'],
			command:'~cabog/programs/x86_64/bin/runCA-OBT.pl -d . -p pname $method_sq createACE=1 pname.frg  2>> celera_errors.txt'
		}
		######## AMOS-VALIDATE RESULTS ###########
		,
		{
						required_files:['9-terminator/pname.asm','9-terminator/pname.frg'],
						command:' ~amos/programs/x86_64/bin/toAmos -f pname.frg -a pname.asm -o - | ~amos/programs/x86_64/bin/bank-transact -m - -b pname.bnk -c 2>> celera_errors.txt'
		}
		,
		{
						required_files:['pname.bnk'],
						command:'~amos/programs/x86_64/bin/amosvalidate pname.bnk 2>> celera_errors.txt'
		}
		,
				######## SINGLETONS MERGE ###########
		{
						required_files:['fasta.pname','qual.pname','9-terminator/pname.singleton.fasta','pname.singletons'],
						command:'~bioperl/rails/ingebiol/config/parsers/singulones_cabog.rb'
		}
		,
		{
						required_files:['pname.fasta'],
						command:'mv pname.fasta all_contig_validated.fasta'
		}
		,
		{
						required_files:['all_contig_validated.fasta','all_singletons.fasta','all_singletons.qual'],
						command:'zip -r validation_result.zip all_contig_validated.fasta all_singletons.fasta all_singletons.qual'
		}
		,
		#### GENOTE ####
	 			{
  	 						exec_if:'"$annotate_sq_cb"=="-annotate"',
								required_files:['all_contig_validated.fasta'],
								command:'~wublast/programs/x86_64/blastx ~bioperl/programs/genote/db/sp_db all_contig_validated.fasta -sort_by_totalscore -hspmax=0 -E=1e-10  -mformat=3 -cpus 4 -o wublast_results.txt'
				}
				,
				{
  							exec_if:'"$annotate_sq_cb"=="-annotate"',
								required_files:['all_contig_validated.fasta','wublast_results.txt','~bioperl/programs/genote/db/sp_anotaciones.txt'],
								command:'~bioperl/programs/genote/genote.rb all_contig_validated.fasta $min_ident_genote $min_hit_length_genote'
				}
         ,
        {
          			exec_if:'"$annotate_sq_cb"=="-annotate"',
                required_files:['gff_regions.gff'],
                command:'~bioperl/programs/genote/gff2ps -a -c -v -C ~bioperl/programs/genote/gff2psrc gff_regions.gff > gff_regions.ps 2>gff2ps_errors.txt'
        }
         ,
        {
          			exec_if:'"$annotate_sq_cb"=="-annotate"',
                required_files:['gff_regions.ps'],
                command:'ps2pdf gff_regions.ps'
        }
        ,
		####  FIN GENOTE ####		
		#cabog_plot.png
		{
			required_files:['pname.qc'],
			command:'~erre/programs/x86_64/bin/R CMD BATCH "--args pname.qc" ~bioperl/rails/ingebiol/config/parsers/cabog.R'
		}
]
,
next_stage_flow:{
	'stage0001':'true'
	}
,
use_queue_system:true,
submit_file_header:[
	'#PBS -q routex86',
	'#PBS -l select=ncpus=4',
  '#PBS -l select=mem=4000mb',
  '#PBS -l walltime=10:00:00']
}
