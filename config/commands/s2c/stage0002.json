########################################################
# Common parameters of command
# ------------------------------------------------------
# You only can modify the values of each key. Be careful
# with punctuation symbols, since this is a json file and
# needs to keep its structure.
#
# Comments must be in their own line preceded with a '#' 
# simbol. 
#
# You can add as many stages as you want, they are shown
# in alphabetical order.
#
########################################################

{
title:'SUBMIT FILES',
stage_type:'submit',
enabled: true,
submit_button_title: 'Run',

#	OPCIONES PARA EL PROGRAMA DE ENSAMBLAJE CABOG

input_params: [

 {
	title:'seqtrim',
	input_type: 'separator'
 }
,
 {
	input_type: 'file',
	id:'fasta_file_sq',
	save_as:'seqs',
	title:'Sequences (select type below)',
	default_value: '',
	required: true,
	tooltip:'Select a sequence file in fasta format'
 }
,
{
	input_type: 'file',
	id:'qual_file_sq',
	save_as:'seqs.fasta.qual',
	title:'Qualities (fasta)',
	default_value: '',
	required: false,
	tooltip:'Select a sequence file in fasta format'
}
,
 {
	input_type: 'popup',
	id:'input_type_popup_sq',
	command_switch:'%s',
	title:'Input type',
	default_value: 'valor3',
	values: {'fasta':'-f seqs',
					 'fasta + qual':'-f seqs -q seqs.fasta.qual',
					 'sff':'-f seqs.fasta -q seqs.fasta.qual',
					 'zip':'-c seqs.zip'
					 }
					,
	required: true,
	tooltip:'You can choose different input formats.'
 }
,
 {
	input_type: 'separator'
 }
,
 {
	input_type: 'integer',
	id:'min_length',
	command_switch:'--seqMinLength=%s',
	title:'Minimun desired length',
	required: false,
	tooltip:'un tooltip',
	default_value: '100',
	validation_lower_limit:'0',
	validation_upper_limit:''
 }

#,
#{
#	input_type: 'integer',
#	id:'a',
#	command_switch:'utgGenomeSize=%s',
#	title:'Genome Size (bp)',
#	required: true,
#	tooltip:'The genome size, in bases.',
#	default_value: '4000000',
#	validation_lower_limit:'1',
#	validation_upper_limit:''
#}
,
 {
	title:'Assembly',
	input_type: 'separator'
 }
,
 {
	input_type: 'popup',
	id:'method_sq',
	command_switch:'unitigger=%s',
	title:'Assembly methods',
	default_value: 'valor3',
	values: {'Unitigger':'utg',
					 'Best Over Graph':'bog'}
					,
	required: true,
	tooltip:'You can choose between two different assembly methods: utg  and bog (recommended for 454 data).'
 }
,
  {
	input_type: 'checkbox',
	id:'ace_sq_cb',
	command_switch:'createACE=1',
	title:'Create ACE',
	title_pos:'right',
	default_value: 'false',
	required: false,
	tooltip:'Create an ACE file for the sacffolds'
 }
,
  {
	input_type: 'checkbox',
	id:'agp_sq_cb',
	command_switch:'createAGP=1',
	title:'Create AGP',
	title_pos:'right',
	default_value: 'false',
	required: false,
	tooltip:'Create an AGP file for the sacffolds'
 }
 ,
  {
	title:'Annotation',
	input_type: 'separator'
 }
,
  {
	input_type: 'checkbox',
	id:'annotate_sq_cb',
	command_switch:'-annotate',
	title:'Annotate (Swissprot + TrEMBL)',
	title_pos:'right',
	default_value: 'true',
	required: false,
	tooltip:'Make annotation using blast with Swissprot and TrEMBL databases'
 }
 ,
 {
	input_type: 'float',
	id:'blast_filter_sq',
	command_switch:'-e %s',
	title:'Consider only alignments with expect below',
	required: false,
	tooltip:'',
	default_value: '1e-10',
	validation_lower_limit:'',
	validation_upper_limit:'',
	visible_if:'"$annotate_sq_cb"=="-annotate"'
 }

],
command_list:[
							# extraer SFF solo si es SFF
							{ exec_if:'"$input_type_popup_sq"=="-f seqs.fasta -q seqs.fasta.qual"',
								required_files:['seqs'],
								command:'~mira/programs/x86_64/bin/sff_extract -o seqs seqs'
							}
							,
							# renombrar fichero si es zip
							{ exec_if:'"$input_type_popup_sq"=="-c seqs.zip"',
								required_files:['seqs'],
								command:'mv seqs seqs.zip'
							}
							,
							# ejecutar seqtrim
							{ 
								required_files:[],
								command:'~bioperl/seqtrim/seqtrim.pl --is_cDNA=0 $min_length $input_type_popup_sq -o fasta.pname'
							}
							,
							# renombrar ficheros a pname
							{ 
								required_files:['fasta.pname.qual'],
								command:'mv fasta.pname.qual qual.pname'
							}
							,
							# quitar vacias del fasta
							{ 
								required_files:['fasta.pname'],
								command:'mv fasta.pname fasta_all.pname; ~bioperl/rails/ingebiol/config/parsers/remove_empty_fasta.rb fasta_all.pname > fasta.pname'
							}
							,
							# quitar vacias del qual
							{ 
								required_files:['qual.pname'],
								command:'mv qual.pname qual_all.pname; ~bioperl/rails/ingebiol/config/parsers/remove_empty_fasta.rb qual_all.pname > qual.pname'
							}
							,
							# extraer XML del fasta
							{ 
								required_files:['fasta.pname'],
								command:'~bioperl/rails/ingebiol/config/parsers/fasta2xml.rb fasta.pname > xml.pname'
							}
							,
							#crear zip con resultados del seqtrim
							{
								required_files:['fasta.pname','qual.pname','xml.pname'],
								command:'zip seqtrim_result.zip fasta.pname qual.pname xml.pname'
							}
							,
							# convert file to frg
							{
								required_files:['fasta.pname','qual.pname','xml.pname'],
								command:'~amos/programs/x86_64/bin/tarchive2ca -o pname fasta.pname 2>> celera_errors.txt'
							}
							,
							# run cabog with frg file, 
							{ 
								required_files:['pname.frg'],
								command:'~cabog/programs/x86_64/bin/runCA-OBT.pl -d . -p pname $method_sq $agp_sq_cb $ace_sq_cb pname.frg  2>> celera_errors.txt'
							}
 ,
        {
                required_files:['9-terminator'],
                command:'zip -r assembly_result.zip 9-terminator'
        }

 ,
        {
                required_files:['9-terminator/pname.asm','9-terminator/pname.frg'],
                command:' ~amos/programs/x86_64/bin/toAmos -f pname.frg -a pname.asm -o - | ~amos/programs/x86_64/bin/bank-transact -m - -b pname.bnk -c 2>> celera_errors.txt'
        }
 ,
        {
                required_files:['pname.bnk'],
                command:'~amos/programs/x86_64/bin/amosvalidate pname.bnk 2>> celera_errors.txt'
        }

 ,
        {
                required_files:['pname.bnk','pname.fasta','pname.ce.feat','pname.snps','pname.snp.feat','pname.depth.feat','pname.singletons','pname.bnk','pname.singletons.seq'],
                command:'zip -r validation_result.zip pname.bnk pname.fasta pname.ce.feat pname.snps pname.snp.feat pname.depth.feat pname.singletons pname.bnk pname.singletons.seq'
        }
	,
        {
					exec_if:'"$annotate_sq_cb"=="-annotate"',
          required_files:['pname.fasta'],
          command:'blastall -p blastx -d ~blast/db/prot.fasta -i pname.fasta -o result.blast'
        }
				,
				{
					exec_if:'"$annotate_sq_cb"=="-annotate"',
          required_files:['result.blast'],
          command:'~bioperl/rails/ingebiol/config/parsers/blast2gff.pl result.blast'
        }
				,
				{
					exec_if:'"$annotate_sq_cb"=="-annotate"',
          required_files:['result.ps'],
          command:'ps2pdf result.ps annotation_graph.pdf'
				}
]
,
next_stage_flow:{
	'stage0001':'true'
	}
,
use_queue_system:true
}
